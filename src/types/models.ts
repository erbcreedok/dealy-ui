/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/api/auth/tokens/obtain/': {
		/**
		 * Takes a set of user credentials and returns an access and refresh JSON web
		 * token pair to prove the authentication of those credentials.
		 */
		post: operations['auth_tokens_obtain_create']
	}
	'/api/auth/tokens/refresh/': {
		/**
		 * Takes a refresh type JSON web token and returns an access type JSON web
		 * token if the refresh token is valid.
		 */
		post: operations['auth_tokens_refresh_create']
	}
	'/api/schema/': {
		/**
		 * OpenApi3 schema for this API. Format can be selected via content negotiation.
		 *
		 * - YAML: application/vnd.oai.openapi
		 * - JSON: application/vnd.oai.openapi+json
		 */
		get: operations['schema_retrieve']
	}
	'/api/services/': {
		post: operations['services_create']
	}
	'/api/state/': {
		get: operations['state_retrieve']
	}
	'/api/users/': {
		post: operations['users_create']
	}
	'/api/users/confirm/': {
		post: operations['users_confirm_create']
	}
}

export interface components {
	schemas: {
		ConfirmationCode: {
			code: string
		}
		CreateUser: {
			/** Format: email */
			email: string
			password: string
		}
		Service: {
			/** Format: uuid */
			id?: string
			/** Format: decimal */
			min_price?: string
			/** Format: decimal */
			max_price?: string
			duration: string
			title: string
			description: string
		}
		State: {
			database_works: boolean
			cache_works: boolean
			broker_works: boolean
		}
		TokenObtainPair: {
			username: string
			password: string
			access: string
			refresh: string
		}
		TokenRefresh: {
			access: string
			refresh: string
		}
	}
}

export interface operations {
	/**
	 * Takes a set of user credentials and returns an access and refresh JSON web
	 * token pair to prove the authentication of those credentials.
	 */
	auth_tokens_obtain_create: {
		responses: {
			200: {
				content: {
					'application/json': components['schemas']['TokenObtainPair']
				}
			}
		}
		requestBody: {
			content: {
				'application/json': components['schemas']['TokenObtainPair']
			}
		}
	}
	/**
	 * Takes a refresh type JSON web token and returns an access type JSON web
	 * token if the refresh token is valid.
	 */
	auth_tokens_refresh_create: {
		responses: {
			200: {
				content: {
					'application/json': components['schemas']['TokenRefresh']
				}
			}
		}
		requestBody: {
			content: {
				'application/json': components['schemas']['TokenRefresh']
			}
		}
	}
	/**
	 * OpenApi3 schema for this API. Format can be selected via content negotiation.
	 *
	 * - YAML: application/vnd.oai.openapi
	 * - JSON: application/vnd.oai.openapi+json
	 */
	schema_retrieve: {
		parameters: {
			query: {
				format?: 'json' | 'yaml'
				lang?: 'en' | 'kz' | 'ru'
			}
		}
		responses: {
			200: {
				content: {
					'application/vnd.oai.openapi': { [key: string]: unknown }
					'application/yaml': { [key: string]: unknown }
					'application/vnd.oai.openapi+json': { [key: string]: unknown }
					'application/json': { [key: string]: unknown }
				}
			}
		}
	}
	services_create: {
		responses: {
			201: {
				content: {
					'application/json': components['schemas']['Service']
				}
			}
		}
		requestBody: {
			content: {
				'application/json': components['schemas']['Service']
			}
		}
	}
	state_retrieve: {
		responses: {
			200: {
				content: {
					'application/json': components['schemas']['State']
				}
			}
		}
	}
	users_create: {
		responses: {
			201: {
				content: {
					'application/json': components['schemas']['CreateUser']
				}
			}
		}
		requestBody: {
			content: {
				'application/json': components['schemas']['CreateUser']
			}
		}
	}
	users_confirm_create: {
		responses: {
			200: {
				content: {
					'application/json': components['schemas']['ConfirmationCode']
				}
			}
		}
		requestBody: {
			content: {
				'application/json': components['schemas']['ConfirmationCode']
			}
		}
	}
}

export interface external {}
